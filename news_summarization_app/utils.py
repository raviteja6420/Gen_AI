# utils.py
import requests
from bs4 import BeautifulSoup
from textblob import TextBlob
from googletrans import Translator
from gtts import gTTS
import os
import uuid

def fetch_news(company):
    """
    Fetch news articles related to the given company using Google News RSS feed.
    Only non-JS pages are used.
    """
    url = f"https://news.google.com/rss/search?q={company}"
    articles = []
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.content, "xml")
        items = soup.find_all("item")
        count = 0
        for item in items:
            if count >= 10:
                break
            title = item.title.text if item.title else "No Title"
            summary = item.description.text if item.description else "No Summary"
            link = item.link.text if item.link else ""
            articles.append({
                "title": title,
                "summary": summary,
                "link": link
            })
            count += 1
    except Exception as e:
        print(f"Error in fetching news: {e}")
    return articles

def analyze_sentiments(text):
    """
    Analyze the sentiment of the given text.
    Returns: "Positive", "Negative", or "Neutral"
    """
    analysis = TextBlob(text)
    polarity = analysis.sentiment.polarity
    if polarity > 0.1:
        return "Positive"
    elif polarity < -0.1:
        return "Negative"
    else:
        return "Neutral"

def generate_comparative_analysis(articles):
    """
    Generate a simple comparative analysis based on sentiment counts and topics.
    For demonstration, topics are generated by taking the first few unique words from the summary.
    """
    sentiment_counts = {"Positive": 0, "Negative": 0, "Neutral": 0}
    for art in articles:
        sentiment = art.get("sentiment", "Neutral")
        sentiment_counts[sentiment] = sentiment_counts.get(sentiment, 0) + 1

        # Dummy topic extraction: get first 3 unique words from the summary
        words = art.get("summary", "").split()
        art["topics"] = list(dict.fromkeys(words))[:3]

    coverage_differences = []
    if len(articles) >= 2:
        coverage_differences.append({
            "Comparison": f"Article 1 ('{articles[0]['title']}') focuses on one aspect, while Article 2 ('{articles[1]['title']}') covers another.",
            "Impact": "This shows mixed market perceptions."
        })

    # Calculate topic overlaps for the first two articles (if available)
    topics_article1 = set(articles[0].get("topics", [])) if articles else set()
    topics_article2 = set(articles[1].get("topics", [])) if len(articles) > 1 else set()
    common_topics = list(topics_article1.intersection(topics_article2))
    unique_topics_article1 = list(topics_article1 - topics_article2)
    unique_topics_article2 = list(topics_article2 - topics_article1)

    topic_overlap = {
        "Common Topics": common_topics,
        "Unique Topics in Article 1": unique_topics_article1,
        "Unique Topics in Article 2": unique_topics_article2
    }
    return {
        "Sentiment Distribution": sentiment_counts,
        "Coverage Differences": coverage_differences,
        "Topic Overlap": topic_overlap
    }

def generate_hindi_tts(text):
    """
    Translate the input text to Hindi and generate a TTS audio file.
    Returns the path to the audio file.
    """
    translator = Translator()
    try:
        translation = translator.translate(text, dest='hi')
        hindi_text = translation.text
    except Exception as e:
        print(f"Translation error: {e}")
        hindi_text = text  # fallback if translation fails

    try:
        tts = gTTS(hindi_text, lang="hi")
        # Create a unique filename and ensure the 'static' directory exists
        if not os.path.exists("static"):
            os.makedirs("static")
        filename = f"static/audio_{uuid.uuid4().hex}.mp3"
        tts.save(filename)
        return filename
    except Exception as e:
        print(f"TTS generation error: {e}")
        return ""
